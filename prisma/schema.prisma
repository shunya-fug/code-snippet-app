// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/generated/schemas/zod"
  useMultipleFiles = true
}

model Snippet {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  /// @zod.string.min(1, { message: "min error" }).max(50, { message: "max error" })
  title       String
  /// @zod.string.min(1, { message: "min error" }).max(50, { message: "max error" })
  language    String
  /// @zod.string.min(1, { message: "min error" }).max(10000, { message: "too long code" })
  code        String
  /// @zod.string.min(1, { message: "min error" }).max(1000, { message: "too long description" })
  description String?
  /// @zod.string.min(1, { message: "min error" }).max(20, { message: "Too long value." }).array(.max(7, { message: "You can set a maximum of 7 tags." }))
  tags        String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("snippets")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts Account[]
  sessions Session[]
  snippets Snippet[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
